Grammar

    0 $accept: list_stmt $end

    1 list_stmt: /* empty */
    2          | list_stmt stmt

    3 stmt: ';'
    4     | PRINT expr ';'
    5     | ctrl_stmt
    6     | expr_stmt ';'

    7 ctrl_stmt: while_stmt
    8          | cond_stmt

    9 while_stmt: WHILE expr enter_sub_scope stmt exit_sub_scope
   10           | WHILE expr '{' enter_sub_scope list_stmt exit_sub_scope '}'

   11 cond_stmt: if_stmt
   12          | if_stmt else_stmt

   13 if_stmt: IF expr enter_sub_scope stmt exit_sub_scope
   14        | IF expr '{' enter_sub_scope list_stmt exit_sub_scope '}'

   15 else_stmt: ELSE enter_sub_scope stmt exit_sub_scope
   16          | ELSE '{' enter_sub_scope list_stmt exit_sub_scope '}'

   17 expr_stmt: expr
   18          | decl
   19          | assign

   20 expr: O_PAR expr C_PAR
   21     | a_expr
   22     | b_expr
   23     | IDENTIFIER

   24 a_expr: expr PLUS expr
   25       | expr MINUS expr
   26       | expr MOLT expr
   27       | expr DIV expr
   28       | MINUS expr
   29       | INT_VAL
   30       | FLOAT_VAL

   31 b_expr: expr BIGGER_THAN expr
   32       | expr BIGGER_EQ_THAN expr
   33       | expr SMALLER_THAN expr
   34       | expr SMALLER_EQ_THAN expr
   35       | expr EQUAL_TO expr
   36       | expr NOT_EQUAL_TO expr
   37       | NOT expr
   38       | BOOL_VAL

   39 decl: typename IDENTIFIER
   40     | typename IDENTIFIER ASSIGN_OP expr

   41 typename: BOOLEAN
   42         | INT
   43         | DOUBLE

   44 assign: IDENTIFIER ASSIGN_OP expr

   45 enter_sub_scope: /* empty */

   46 exit_sub_scope: /* empty */


Terminals, with rules where they appear

$end (0) 0
';' (59) 3 4 6
'{' (123) 10 14 16
'}' (125) 10 14 16
error (256)
BOOL_VAL (258) 38
INT_VAL (259) 29
FLOAT_VAL (260) 30
IDENTIFIER (261) 23 39 40 44
DOUBLE (262) 43
INT (263) 42
BOOLEAN (264) 41
WHILE (265) 9 10
IF (266) 13 14
ELSE (267) 15 16
PRINT (268) 4
EXIT_SUB_SCOPE (269)
ENTER_SUB_SCOPE (270)
ASSIGN_OP (271) 40 44
SMALLER_EQ_THAN (272) 34
BIGGER_EQ_THAN (273) 32
NOT_EQUAL_TO (274) 36
EQUAL_TO (275) 35
SMALLER_THAN (276) 33
BIGGER_THAN (277) 31
NOT (278) 37
PLUS (279) 24
MINUS (280) 25 28
DIV (281) 27
MOLT (282) 26
C_PAR (283) 20
O_PAR (284) 20
UMINUS (285)
IFX (286)
LIST_STMT (287)


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
list_stmt (37)
    on left: 1 2, on right: 0 2 10 14 16
stmt (38)
    on left: 3 4 5 6, on right: 2 9 13 15
ctrl_stmt (39)
    on left: 7 8, on right: 5
while_stmt (40)
    on left: 9 10, on right: 7
cond_stmt (41)
    on left: 11 12, on right: 8
if_stmt (42)
    on left: 13 14, on right: 11 12
else_stmt (43)
    on left: 15 16, on right: 12
expr_stmt (44)
    on left: 17 18 19, on right: 6
expr (45)
    on left: 20 21 22 23, on right: 4 9 10 13 14 17 20 24 25 26 27
    28 31 32 33 34 35 36 37 40 44
a_expr (46)
    on left: 24 25 26 27 28 29 30, on right: 21
b_expr (47)
    on left: 31 32 33 34 35 36 37 38, on right: 22
decl (48)
    on left: 39 40, on right: 18
typename (49)
    on left: 41 42 43, on right: 39 40
assign (50)
    on left: 44, on right: 19
enter_sub_scope (51)
    on left: 45, on right: 9 10 13 14 15 16
exit_sub_scope (52)
    on left: 46, on right: 9 10 13 14 15 16


state 0

    0 $accept: . list_stmt $end

    $default  reduce using rule 1 (list_stmt)

    list_stmt  go to state 1


state 1

    0 $accept: list_stmt . $end
    2 list_stmt: list_stmt . stmt

    $end        shift, and go to state 2
    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DOUBLE      shift, and go to state 7
    INT         shift, and go to state 8
    BOOLEAN     shift, and go to state 9
    WHILE       shift, and go to state 10
    IF          shift, and go to state 11
    PRINT       shift, and go to state 12
    ';'         shift, and go to state 13
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    stmt        go to state 17
    ctrl_stmt   go to state 18
    while_stmt  go to state 19
    cond_stmt   go to state 20
    if_stmt     go to state 21
    expr_stmt   go to state 22
    expr        go to state 23
    a_expr      go to state 24
    b_expr      go to state 25
    decl        go to state 26
    typename    go to state 27
    assign      go to state 28


state 2

    0 $accept: list_stmt $end .

    $default  accept


state 3

   38 b_expr: BOOL_VAL .

    $default  reduce using rule 38 (b_expr)


state 4

   29 a_expr: INT_VAL .

    $default  reduce using rule 29 (a_expr)


state 5

   30 a_expr: FLOAT_VAL .

    $default  reduce using rule 30 (a_expr)


state 6

   23 expr: IDENTIFIER .
   44 assign: IDENTIFIER . ASSIGN_OP expr

    ASSIGN_OP  shift, and go to state 29

    $default  reduce using rule 23 (expr)


state 7

   43 typename: DOUBLE .

    $default  reduce using rule 43 (typename)


state 8

   42 typename: INT .

    $default  reduce using rule 42 (typename)


state 9

   41 typename: BOOLEAN .

    $default  reduce using rule 41 (typename)


state 10

    9 while_stmt: WHILE . expr enter_sub_scope stmt exit_sub_scope
   10           | WHILE . expr '{' enter_sub_scope list_stmt exit_sub_scope '}'

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 31
    a_expr  go to state 24
    b_expr  go to state 25


state 11

   13 if_stmt: IF . expr enter_sub_scope stmt exit_sub_scope
   14        | IF . expr '{' enter_sub_scope list_stmt exit_sub_scope '}'

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 32
    a_expr  go to state 24
    b_expr  go to state 25


state 12

    4 stmt: PRINT . expr ';'

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 33
    a_expr  go to state 24
    b_expr  go to state 25


state 13

    3 stmt: ';' .

    $default  reduce using rule 3 (stmt)


state 14

   37 b_expr: NOT . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 34
    a_expr  go to state 24
    b_expr  go to state 25


state 15

   28 a_expr: MINUS . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 35
    a_expr  go to state 24
    b_expr  go to state 25


state 16

   20 expr: O_PAR . expr C_PAR

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 36
    a_expr  go to state 24
    b_expr  go to state 25


state 17

    2 list_stmt: list_stmt stmt .

    $default  reduce using rule 2 (list_stmt)


state 18

    5 stmt: ctrl_stmt .

    $default  reduce using rule 5 (stmt)


state 19

    7 ctrl_stmt: while_stmt .

    $default  reduce using rule 7 (ctrl_stmt)


state 20

    8 ctrl_stmt: cond_stmt .

    $default  reduce using rule 8 (ctrl_stmt)


state 21

   11 cond_stmt: if_stmt .
   12          | if_stmt . else_stmt

    ELSE  shift, and go to state 37

    $default  reduce using rule 11 (cond_stmt)

    else_stmt  go to state 38


state 22

    6 stmt: expr_stmt . ';'

    ';'  shift, and go to state 39


state 23

   17 expr_stmt: expr .
   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    SMALLER_EQ_THAN  shift, and go to state 40
    BIGGER_EQ_THAN   shift, and go to state 41
    NOT_EQUAL_TO     shift, and go to state 42
    EQUAL_TO         shift, and go to state 43
    SMALLER_THAN     shift, and go to state 44
    BIGGER_THAN      shift, and go to state 45
    PLUS             shift, and go to state 46
    MINUS            shift, and go to state 47
    DIV              shift, and go to state 48
    MOLT             shift, and go to state 49

    $default  reduce using rule 17 (expr_stmt)


state 24

   21 expr: a_expr .

    $default  reduce using rule 21 (expr)


state 25

   22 expr: b_expr .

    $default  reduce using rule 22 (expr)


state 26

   18 expr_stmt: decl .

    $default  reduce using rule 18 (expr_stmt)


state 27

   39 decl: typename . IDENTIFIER
   40     | typename . IDENTIFIER ASSIGN_OP expr

    IDENTIFIER  shift, and go to state 50


state 28

   19 expr_stmt: assign .

    $default  reduce using rule 19 (expr_stmt)


state 29

   44 assign: IDENTIFIER ASSIGN_OP . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 51
    a_expr  go to state 24
    b_expr  go to state 25


state 30

   23 expr: IDENTIFIER .

    $default  reduce using rule 23 (expr)


state 31

    9 while_stmt: WHILE expr . enter_sub_scope stmt exit_sub_scope
   10           | WHILE expr . '{' enter_sub_scope list_stmt exit_sub_scope '}'
   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    SMALLER_EQ_THAN  shift, and go to state 40
    BIGGER_EQ_THAN   shift, and go to state 41
    NOT_EQUAL_TO     shift, and go to state 42
    EQUAL_TO         shift, and go to state 43
    SMALLER_THAN     shift, and go to state 44
    BIGGER_THAN      shift, and go to state 45
    PLUS             shift, and go to state 46
    MINUS            shift, and go to state 47
    DIV              shift, and go to state 48
    MOLT             shift, and go to state 49
    '{'              shift, and go to state 52

    $default  reduce using rule 45 (enter_sub_scope)

    enter_sub_scope  go to state 53


state 32

   13 if_stmt: IF expr . enter_sub_scope stmt exit_sub_scope
   14        | IF expr . '{' enter_sub_scope list_stmt exit_sub_scope '}'
   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    SMALLER_EQ_THAN  shift, and go to state 40
    BIGGER_EQ_THAN   shift, and go to state 41
    NOT_EQUAL_TO     shift, and go to state 42
    EQUAL_TO         shift, and go to state 43
    SMALLER_THAN     shift, and go to state 44
    BIGGER_THAN      shift, and go to state 45
    PLUS             shift, and go to state 46
    MINUS            shift, and go to state 47
    DIV              shift, and go to state 48
    MOLT             shift, and go to state 49
    '{'              shift, and go to state 54

    $default  reduce using rule 45 (enter_sub_scope)

    enter_sub_scope  go to state 55


state 33

    4 stmt: PRINT expr . ';'
   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    ';'              shift, and go to state 56
    SMALLER_EQ_THAN  shift, and go to state 40
    BIGGER_EQ_THAN   shift, and go to state 41
    NOT_EQUAL_TO     shift, and go to state 42
    EQUAL_TO         shift, and go to state 43
    SMALLER_THAN     shift, and go to state 44
    BIGGER_THAN      shift, and go to state 45
    PLUS             shift, and go to state 46
    MINUS            shift, and go to state 47
    DIV              shift, and go to state 48
    MOLT             shift, and go to state 49


state 34

   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr
   37       | NOT expr .

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    DIV    shift, and go to state 48
    MOLT   shift, and go to state 49

    $default  reduce using rule 37 (b_expr)


state 35

   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   28       | MINUS expr .
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    $default  reduce using rule 28 (a_expr)


state 36

   20 expr: O_PAR expr . C_PAR
   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    SMALLER_EQ_THAN  shift, and go to state 40
    BIGGER_EQ_THAN   shift, and go to state 41
    NOT_EQUAL_TO     shift, and go to state 42
    EQUAL_TO         shift, and go to state 43
    SMALLER_THAN     shift, and go to state 44
    BIGGER_THAN      shift, and go to state 45
    PLUS             shift, and go to state 46
    MINUS            shift, and go to state 47
    DIV              shift, and go to state 48
    MOLT             shift, and go to state 49
    C_PAR            shift, and go to state 57


state 37

   15 else_stmt: ELSE . enter_sub_scope stmt exit_sub_scope
   16          | ELSE . '{' enter_sub_scope list_stmt exit_sub_scope '}'

    '{'  shift, and go to state 58

    $default  reduce using rule 45 (enter_sub_scope)

    enter_sub_scope  go to state 59


state 38

   12 cond_stmt: if_stmt else_stmt .

    $default  reduce using rule 12 (cond_stmt)


state 39

    6 stmt: expr_stmt ';' .

    $default  reduce using rule 6 (stmt)


state 40

   34 b_expr: expr SMALLER_EQ_THAN . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 60
    a_expr  go to state 24
    b_expr  go to state 25


state 41

   32 b_expr: expr BIGGER_EQ_THAN . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 61
    a_expr  go to state 24
    b_expr  go to state 25


state 42

   36 b_expr: expr NOT_EQUAL_TO . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 62
    a_expr  go to state 24
    b_expr  go to state 25


state 43

   35 b_expr: expr EQUAL_TO . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 63
    a_expr  go to state 24
    b_expr  go to state 25


state 44

   33 b_expr: expr SMALLER_THAN . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 64
    a_expr  go to state 24
    b_expr  go to state 25


state 45

   31 b_expr: expr BIGGER_THAN . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 65
    a_expr  go to state 24
    b_expr  go to state 25


state 46

   24 a_expr: expr PLUS . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 66
    a_expr  go to state 24
    b_expr  go to state 25


state 47

   25 a_expr: expr MINUS . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 67
    a_expr  go to state 24
    b_expr  go to state 25


state 48

   27 a_expr: expr DIV . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 68
    a_expr  go to state 24
    b_expr  go to state 25


state 49

   26 a_expr: expr MOLT . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 69
    a_expr  go to state 24
    b_expr  go to state 25


state 50

   39 decl: typename IDENTIFIER .
   40     | typename IDENTIFIER . ASSIGN_OP expr

    ASSIGN_OP  shift, and go to state 70

    $default  reduce using rule 39 (decl)


state 51

   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr
   44 assign: IDENTIFIER ASSIGN_OP expr .

    SMALLER_EQ_THAN  shift, and go to state 40
    BIGGER_EQ_THAN   shift, and go to state 41
    NOT_EQUAL_TO     shift, and go to state 42
    EQUAL_TO         shift, and go to state 43
    SMALLER_THAN     shift, and go to state 44
    BIGGER_THAN      shift, and go to state 45
    PLUS             shift, and go to state 46
    MINUS            shift, and go to state 47
    DIV              shift, and go to state 48
    MOLT             shift, and go to state 49

    $default  reduce using rule 44 (assign)


state 52

   10 while_stmt: WHILE expr '{' . enter_sub_scope list_stmt exit_sub_scope '}'

    $default  reduce using rule 45 (enter_sub_scope)

    enter_sub_scope  go to state 71


state 53

    9 while_stmt: WHILE expr enter_sub_scope . stmt exit_sub_scope

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DOUBLE      shift, and go to state 7
    INT         shift, and go to state 8
    BOOLEAN     shift, and go to state 9
    WHILE       shift, and go to state 10
    IF          shift, and go to state 11
    PRINT       shift, and go to state 12
    ';'         shift, and go to state 13
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    stmt        go to state 72
    ctrl_stmt   go to state 18
    while_stmt  go to state 19
    cond_stmt   go to state 20
    if_stmt     go to state 21
    expr_stmt   go to state 22
    expr        go to state 23
    a_expr      go to state 24
    b_expr      go to state 25
    decl        go to state 26
    typename    go to state 27
    assign      go to state 28


state 54

   14 if_stmt: IF expr '{' . enter_sub_scope list_stmt exit_sub_scope '}'

    $default  reduce using rule 45 (enter_sub_scope)

    enter_sub_scope  go to state 73


state 55

   13 if_stmt: IF expr enter_sub_scope . stmt exit_sub_scope

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DOUBLE      shift, and go to state 7
    INT         shift, and go to state 8
    BOOLEAN     shift, and go to state 9
    WHILE       shift, and go to state 10
    IF          shift, and go to state 11
    PRINT       shift, and go to state 12
    ';'         shift, and go to state 13
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    stmt        go to state 74
    ctrl_stmt   go to state 18
    while_stmt  go to state 19
    cond_stmt   go to state 20
    if_stmt     go to state 21
    expr_stmt   go to state 22
    expr        go to state 23
    a_expr      go to state 24
    b_expr      go to state 25
    decl        go to state 26
    typename    go to state 27
    assign      go to state 28


state 56

    4 stmt: PRINT expr ';' .

    $default  reduce using rule 4 (stmt)


state 57

   20 expr: O_PAR expr C_PAR .

    $default  reduce using rule 20 (expr)


state 58

   16 else_stmt: ELSE '{' . enter_sub_scope list_stmt exit_sub_scope '}'

    $default  reduce using rule 45 (enter_sub_scope)

    enter_sub_scope  go to state 75


state 59

   15 else_stmt: ELSE enter_sub_scope . stmt exit_sub_scope

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DOUBLE      shift, and go to state 7
    INT         shift, and go to state 8
    BOOLEAN     shift, and go to state 9
    WHILE       shift, and go to state 10
    IF          shift, and go to state 11
    PRINT       shift, and go to state 12
    ';'         shift, and go to state 13
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    stmt        go to state 76
    ctrl_stmt   go to state 18
    while_stmt  go to state 19
    cond_stmt   go to state 20
    if_stmt     go to state 21
    expr_stmt   go to state 22
    expr        go to state 23
    a_expr      go to state 24
    b_expr      go to state 25
    decl        go to state 26
    typename    go to state 27
    assign      go to state 28


state 60

   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   34       | expr SMALLER_EQ_THAN expr .
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    DIV    shift, and go to state 48
    MOLT   shift, and go to state 49

    $default  reduce using rule 34 (b_expr)


state 61

   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   32       | expr BIGGER_EQ_THAN expr .
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    DIV    shift, and go to state 48
    MOLT   shift, and go to state 49

    $default  reduce using rule 32 (b_expr)


state 62

   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr
   36       | expr NOT_EQUAL_TO expr .

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    DIV    shift, and go to state 48
    MOLT   shift, and go to state 49

    $default  reduce using rule 36 (b_expr)


state 63

   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   35       | expr EQUAL_TO expr .
   36       | expr . NOT_EQUAL_TO expr

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    DIV    shift, and go to state 48
    MOLT   shift, and go to state 49

    $default  reduce using rule 35 (b_expr)


state 64

   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   33       | expr SMALLER_THAN expr .
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    DIV    shift, and go to state 48
    MOLT   shift, and go to state 49

    $default  reduce using rule 33 (b_expr)


state 65

   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   31       | expr BIGGER_THAN expr .
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    DIV    shift, and go to state 48
    MOLT   shift, and go to state 49

    $default  reduce using rule 31 (b_expr)


state 66

   24 a_expr: expr . PLUS expr
   24       | expr PLUS expr .
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    DIV   shift, and go to state 48
    MOLT  shift, and go to state 49

    $default  reduce using rule 24 (a_expr)


state 67

   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   25       | expr MINUS expr .
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    DIV   shift, and go to state 48
    MOLT  shift, and go to state 49

    $default  reduce using rule 25 (a_expr)


state 68

   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   27       | expr DIV expr .
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    $default  reduce using rule 27 (a_expr)


state 69

   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   26       | expr MOLT expr .
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr

    $default  reduce using rule 26 (a_expr)


state 70

   40 decl: typename IDENTIFIER ASSIGN_OP . expr

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 30
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    expr    go to state 77
    a_expr  go to state 24
    b_expr  go to state 25


state 71

   10 while_stmt: WHILE expr '{' enter_sub_scope . list_stmt exit_sub_scope '}'

    $default  reduce using rule 1 (list_stmt)

    list_stmt  go to state 78


state 72

    9 while_stmt: WHILE expr enter_sub_scope stmt . exit_sub_scope

    $default  reduce using rule 46 (exit_sub_scope)

    exit_sub_scope  go to state 79


state 73

   14 if_stmt: IF expr '{' enter_sub_scope . list_stmt exit_sub_scope '}'

    $default  reduce using rule 1 (list_stmt)

    list_stmt  go to state 80


state 74

   13 if_stmt: IF expr enter_sub_scope stmt . exit_sub_scope

    $default  reduce using rule 46 (exit_sub_scope)

    exit_sub_scope  go to state 81


state 75

   16 else_stmt: ELSE '{' enter_sub_scope . list_stmt exit_sub_scope '}'

    $default  reduce using rule 1 (list_stmt)

    list_stmt  go to state 82


state 76

   15 else_stmt: ELSE enter_sub_scope stmt . exit_sub_scope

    $default  reduce using rule 46 (exit_sub_scope)

    exit_sub_scope  go to state 83


state 77

   24 a_expr: expr . PLUS expr
   25       | expr . MINUS expr
   26       | expr . MOLT expr
   27       | expr . DIV expr
   31 b_expr: expr . BIGGER_THAN expr
   32       | expr . BIGGER_EQ_THAN expr
   33       | expr . SMALLER_THAN expr
   34       | expr . SMALLER_EQ_THAN expr
   35       | expr . EQUAL_TO expr
   36       | expr . NOT_EQUAL_TO expr
   40 decl: typename IDENTIFIER ASSIGN_OP expr .

    SMALLER_EQ_THAN  shift, and go to state 40
    BIGGER_EQ_THAN   shift, and go to state 41
    NOT_EQUAL_TO     shift, and go to state 42
    EQUAL_TO         shift, and go to state 43
    SMALLER_THAN     shift, and go to state 44
    BIGGER_THAN      shift, and go to state 45
    PLUS             shift, and go to state 46
    MINUS            shift, and go to state 47
    DIV              shift, and go to state 48
    MOLT             shift, and go to state 49

    $default  reduce using rule 40 (decl)


state 78

    2 list_stmt: list_stmt . stmt
   10 while_stmt: WHILE expr '{' enter_sub_scope list_stmt . exit_sub_scope '}'

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DOUBLE      shift, and go to state 7
    INT         shift, and go to state 8
    BOOLEAN     shift, and go to state 9
    WHILE       shift, and go to state 10
    IF          shift, and go to state 11
    PRINT       shift, and go to state 12
    ';'         shift, and go to state 13
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    $default  reduce using rule 46 (exit_sub_scope)

    stmt            go to state 17
    ctrl_stmt       go to state 18
    while_stmt      go to state 19
    cond_stmt       go to state 20
    if_stmt         go to state 21
    expr_stmt       go to state 22
    expr            go to state 23
    a_expr          go to state 24
    b_expr          go to state 25
    decl            go to state 26
    typename        go to state 27
    assign          go to state 28
    exit_sub_scope  go to state 84


state 79

    9 while_stmt: WHILE expr enter_sub_scope stmt exit_sub_scope .

    $default  reduce using rule 9 (while_stmt)


state 80

    2 list_stmt: list_stmt . stmt
   14 if_stmt: IF expr '{' enter_sub_scope list_stmt . exit_sub_scope '}'

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DOUBLE      shift, and go to state 7
    INT         shift, and go to state 8
    BOOLEAN     shift, and go to state 9
    WHILE       shift, and go to state 10
    IF          shift, and go to state 11
    PRINT       shift, and go to state 12
    ';'         shift, and go to state 13
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    $default  reduce using rule 46 (exit_sub_scope)

    stmt            go to state 17
    ctrl_stmt       go to state 18
    while_stmt      go to state 19
    cond_stmt       go to state 20
    if_stmt         go to state 21
    expr_stmt       go to state 22
    expr            go to state 23
    a_expr          go to state 24
    b_expr          go to state 25
    decl            go to state 26
    typename        go to state 27
    assign          go to state 28
    exit_sub_scope  go to state 85


state 81

   13 if_stmt: IF expr enter_sub_scope stmt exit_sub_scope .

    $default  reduce using rule 13 (if_stmt)


state 82

    2 list_stmt: list_stmt . stmt
   16 else_stmt: ELSE '{' enter_sub_scope list_stmt . exit_sub_scope '}'

    BOOL_VAL    shift, and go to state 3
    INT_VAL     shift, and go to state 4
    FLOAT_VAL   shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DOUBLE      shift, and go to state 7
    INT         shift, and go to state 8
    BOOLEAN     shift, and go to state 9
    WHILE       shift, and go to state 10
    IF          shift, and go to state 11
    PRINT       shift, and go to state 12
    ';'         shift, and go to state 13
    NOT         shift, and go to state 14
    MINUS       shift, and go to state 15
    O_PAR       shift, and go to state 16

    $default  reduce using rule 46 (exit_sub_scope)

    stmt            go to state 17
    ctrl_stmt       go to state 18
    while_stmt      go to state 19
    cond_stmt       go to state 20
    if_stmt         go to state 21
    expr_stmt       go to state 22
    expr            go to state 23
    a_expr          go to state 24
    b_expr          go to state 25
    decl            go to state 26
    typename        go to state 27
    assign          go to state 28
    exit_sub_scope  go to state 86


state 83

   15 else_stmt: ELSE enter_sub_scope stmt exit_sub_scope .

    $default  reduce using rule 15 (else_stmt)


state 84

   10 while_stmt: WHILE expr '{' enter_sub_scope list_stmt exit_sub_scope . '}'

    '}'  shift, and go to state 87


state 85

   14 if_stmt: IF expr '{' enter_sub_scope list_stmt exit_sub_scope . '}'

    '}'  shift, and go to state 88


state 86

   16 else_stmt: ELSE '{' enter_sub_scope list_stmt exit_sub_scope . '}'

    '}'  shift, and go to state 89


state 87

   10 while_stmt: WHILE expr '{' enter_sub_scope list_stmt exit_sub_scope '}' .

    $default  reduce using rule 10 (while_stmt)


state 88

   14 if_stmt: IF expr '{' enter_sub_scope list_stmt exit_sub_scope '}' .

    $default  reduce using rule 14 (if_stmt)


state 89

   16 else_stmt: ELSE '{' enter_sub_scope list_stmt exit_sub_scope '}' .

    $default  reduce using rule 16 (else_stmt)
