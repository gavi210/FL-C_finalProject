Two types:
- number
- boolean 

Expressions over them
- arithmetic expressions among double
- boolean operators returning boolean value (0: false, 1: true)

S -> Expr               {if(Expr.type != error) S.type = void, S.value = Expr.value 
                            else S.type = error}

Expr = (Expr1)                  {if(Expr1.type != error) Expr.type = Expr1.type, Expr.value = Expr1.value
                                    else Expr1.type = error }
    | TRUE                      {BoolExpr.type = boolean, BoolExpr.value = true}
    | FALSE                     {BoolExpr.type = boolean, BoolExpr.value = false}
    | !(Expr1)              {if(BoolExpr1.type == boolean) BoolExpr.type = boolean, BoolExpr.value = !(BoolExpr1.value) 
                                    else BoolExpr.type = error}
    | Expr1 && Expr2    {if(BoolExpr1.type == boolean && BoolExpr2.type == boolean) BoolExpr.type = boolean, BoolExpr.value = (BoolExpr1.value && BoolExpr2.value)
                                    else BoolExpr.type = error}
    | Expr1 || Expr2    {if(BoolExpr1.type == boolean && BoolExpr2.type == boolean) BoolExpr.type = boolean, BoolExpr.value = (BoolExpr1.value || BoolExpr2.value)
                                    else BoolExpr.type = error}
    | NUM
    | Expr1 + Expr2
    | Expr1 - Expr2
    | Expr1 * Expr2
    | Expr1 / Expr2
    | -(Expr)